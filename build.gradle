plugins {
  id 'com.diffplug.spotless' version '6.25.0'
  id 'io.freefair.lombok' version '8.6'
  id 'jacoco'
  id 'java-library'
  id 'maven-publish'
  id 'net.researchgate.release' version '3.0.2'
  id 'jvm-test-suite'
  id 'signing'
}

ext {
  commonsLangVersion = '3.12.0'
  hamcrestVersion = '2.2'
  hc5AsyncJsonVersion = '0.3.0'
  httpClientVersion = '5.1.4'
  isReleaseVersion = !version.endsWith("SNAPSHOT")
  jacksonVersion = '2.17.2'
  junitVersion = '5.10.3'
  logbackVersion = '1.5.6'
  mockitoVersion = '5.12.0'
  mockServerVersion = '5.15.0'
  slf4jVersion = '2.0.13'
}

group = 'com.nia-medtech.oss'

repositories {
  mavenCentral()
}

dependencies {
  api "org.apache.httpcomponents.client5:httpclient5:${httpClientVersion}"
  
  implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
  implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
  implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"
  implementation "org.slf4j:slf4j-api:${slf4jVersion}"
  implementation "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
}

javadoc {
  options {
    addStringOption('Xdoclint:none', '-quiet')
  }
}

java {
  withJavadocJar()
  withSourcesJar()
}

testing {
  suites { 
    test { 
      useJUnitJupiter()
      dependencies {
        implementation "org.hamcrest:hamcrest:${hamcrestVersion}"

        implementation(platform("org.junit:junit-bom:${junitVersion}"))
        implementation('org.junit.jupiter:junit-jupiter')
        implementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
        implementation "org.mockito:mockito-core:${mockitoVersion}"
  
        runtimeOnly "ch.qos.logback:logback-classic:${logbackVersion}"
        runtimeOnly('org.junit.platform:junit-platform-launcher')
      } 
    }

    integrationTest(JvmTestSuite) { 
      useJUnitJupiter()
      dependencies {
        implementation project()
        implementation "org.mock-server:mockserver-junit-jupiter:${mockServerVersion}"
      }

      targets { 
        all {
          testTask.configure {
            shouldRunAfter(test)
          }
        }
      }
    }
  }
}

tasks.named('check') { 
  dependsOn(testing.suites.integrationTest)
}

spotless {
  format 'misc', {
    target '*.md', '.gitignore', '*.adoc'
    trimTrailingWhitespace()
    indentWithSpaces(2)
    endWithNewline()
  }
        
  groovyGradle {
    target '*.gradle'
  }

  java {
    googleJavaFormat()
    formatAnnotations()
  }

}

publishing {
  repositories {
    maven {
      name = "ossrh"
      url = isReleaseVersion ? project.ossrhReleaseRepoUrl : project.ossrhSnapshotRepoUrl
      credentials {
        username findProperty("ossrhUsername")
        password findProperty("ossrhPassword")
      }
    }
    
    maven {
      name = "nexus"
      url = isReleaseVersion ? project.nexusReleaseRepoUrl : project.nexusSnapshotRepoUrl
      credentials {
        username findProperty("nexusUsername")
        password findProperty("nexusPassword")
      }
    }
  }
  
  publications {
    mavenJava(MavenPublication) {
      from components.java
      
      pom {
        name = 'expo-server-sdk'
        description = 'Java implementation of expo-server-sdk implementation.Classes and methods to manage push notifications'
        url = 'https://github.com/nia-medtech/expo-server-sdk-java'
 
        licenses {
          license {
            name = 'The MIT License'
            url = 'https://raw.githubusercontent.com/nia-medtech/expo-server-sdk-java/edit/main/LICENCE.txt'
          }
        }
        developers {
          developer {
            id = 'oliverwelter'
            name = 'Oliver Welter'
            email = 'oliver.welter@nia-medtech.com'
          }
        }
        scm {
          connection = 'scm:git:git@github.com:nia-medtech/expo-server-sdk-java.git'
          developerConnection = 'scm:git:git@github.com:nia-medtech/expo-server-sdk-java.git'
          url = 'scm:git:git@github.com:nia-medtech/expo-server-sdk-java.git'
        }
      }
    }
  }
}

release {
  git {
    requireBranch.set('main|[0-9]+\\.[0-9]+\\.x')
  }
}

signing {
  required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
  def signingKey = findProperty("signingKey")
  def signingPassword = findProperty("signingPassword")
  useInMemoryPgpKeys(signingKey, signingPassword)
  sign publishing.publications.mavenJava
}
